#Assignments:
select * from users;
select * from Products;
select * from orders;
select * from orderdetails;
#1.	List all customers who have made purchases of more than $80.
select  U.name, 
    U.email, 
    sum(O.total_amount) as total_spent
from Users u, 
orders o 
where u.user_id = o.user_id
group by u.user_id
having total_spent > 80;

#2.	Retrieve all orders placed in the last 280 days along with the customer name and email.
select  u.name, 
    u.email, 
    o.order_id,
    o.order_date,
    o.total_amount
from Users u, 
orders o 
where u.user_id = o.user_id
and o.order_date >= CURDATE() - INTERVAL 280 DAY;

#3.	Find the average product price for each category.
select
category,
avg(price) as avg_price
from products 
group by category;
		
#4.	List all customers who have purchased a product from the category Electronics.
select distinct
u.name,
u.email
from users u, orders o, 
orderdetails od,
products p 
where u.user_id = o.user_id
and o.order_id = od.order_id
and od.product_id = p.product_id
and p.category = "Electronics";

#5.	Find the total number of products sold and the total revenue generated for each product.
SELECT 
    P.name AS product_name, 
    SUM(OD.quantity) AS total_quantity_sold, 
    SUM(OD.quantity * P.price) AS total_revenue
FROM 
    OrderDetails OD , 
    Products P 
    where OD.product_id = P.product_id
GROUP BY 
    P.product_id;
    
#6.	Update the price of all products in the Books category, increasing it by 10%.Query.
SET SQL_SAFE_UPDATES = 0;
update products
set price = (price * 1.10)
where category = "Books";

#7.	Remove all orders that were placed before 2020.
SET SQL_SAFE_UPDATES = 0;
delete from orders
where order_date < '2020-01-01';

#8.	Write a query to fetch the order details, including customer name, product name, and quantity, for orders placed on 2024-05-01.
select u.name as customer_name,
p.name as product_name,
o.order_date,
o.total_amount,
od.quantity
from users u 
join orders o on u.user_id = o.user_id
join orderdetails od on o.order_id = od.order_id
join products p on od.product_id = p.product_id
where o.order_date = '2024-05-01';

#9.	Fetch all customers and the total number of orders they have placed.
select u.name as customer_name,
u.email,
count(o.order_id) as total_orders
from users u,
orders o
where u.user_id = o.user_id
group by
u.user_id;
#10.	Retrieve the average rating for all products in the Electronics category.
#no rating tableto find average but we can create one
CREATE TABLE Ratings (
    rating_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    product_id INT,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    rating_date DATE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);
INSERT INTO Ratings (user_id, product_id, rating, rating_date)
VALUES (1, 1, 5, '2025-06-12'),
       (2, 2, 4, '2025-06-11'),
       (3, 3, 3, '2025-06-10');
SELECT 
    p.name as product_name,
    AVG(r.rating) AS average_rating
FROM 
    Products p
JOIN 
    Ratings r ON p.product_id = r.product_id
WHERE 
    p.category = 'Electronics'
GROUP BY 
    p.name;
    
#11.	List all customers who purchased more than 1 units of any product, including the product name and total quantity purchased.
SELECT 
    U.name AS customer_name, 
    U.email, 
    P.name AS product_name, 
    SUM(OD.quantity) AS total_quantity
FROM 
    Users U
JOIN 
    Orders O ON U.user_id = O.user_id
JOIN 
    OrderDetails OD ON O.order_id = OD.order_id
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    U.user_id, P.product_id
HAVING 
    total_quantity > 1;
#12.	Find the total revenue generated by each category along with the category name.
SELECT 
    P.category, 
    SUM(OD.quantity * P.price) AS total_revenue
FROM 
    Products P
JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
GROUP BY 
    P.category;
